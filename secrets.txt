Introduction:
Keeping secrets such as passwords, access tokens, and other sensitive information in the source code or YAML files is not secure, and it can lead to serious consequences if the code gets into the wrong hands. Therefore, it is essential to use a more secure way of managing secrets in Kubernetes, such as Kubernetes secrets. Kubernetes secrets provide a way to store and manage sensitive information, such as passwords, OAuth tokens, and SSH keys.

In this report, I will describe the steps I took to secure secrets in the Kubernetes deployment by replacing the hard-coded secrets with Kubernetes secrets.

Steps taken to secure secrets:

    Identify the places where secrets are used:
        First, I identified the places where secrets were used in the Kubernetes deployment. I found that the database username and password were stored in kubernetes Yaml file and Secret_Key in the Django settings.py file.

    Create Kubernetes secrets:
        Next, I created Kubernetes secrets for the database username and password and Secret_key using the following command:
    
            kubectl create secret opauqe giftcard-app-secrets --from-literal=db_name=<db_username> --from-literal=db_password=<db_password> --from-literal=app_secret=<db_username>
    
        This command creates a opaque secret called "giftcard-app-secrets" and sets the "db_name", "db_password" and "app_secret" keys to the provided values.

    Modify Kubernetes YAML files:
        I modified the Kubernetes YAML files to use the newly created secrets instead of hard-coding the database credentials. Here's an example of how I modified the deployment YAML file:

    Update the settings.py file:
        Finally, I updated the settings.py file to use the new environment variables for the database credentials and Secret_Key.

    Alternatively initating giftcard-app-secrets through Yaml file:
        A Yaml file is created to initiate giftcard-app-secrets
            The file has to be removed from git repository using gitignore. This way the secrets in production environment never leave.
            To ensure that the Yaml file is not pushed to a Docker registry, you can exclude it from the build context using a .dockerignore file. The .dockerignore file works in a similar way to .gitignore in that it specifies files and directories to be excluded from the build context.


Conclusion:
Securing secrets is an essential part of deploying an application in Kubernetes. By using Kubernetes secrets, we can keep sensitive information, such as passwords, keys and tokens, secure and prevent them from being leaked. In this report, I have described the steps I took to secure secrets in the Kubernetes deployment by replacing hard-coded secrets with Kubernetes secrets.