Introduction:
Storing sensitive data like passwords, access tokens, and other confidential information directly in source code or YAML files is unsafe. If such code falls into unintended hands, it could lead to severe security breaches. A more secure approach is to utilize Kubernetes secrets, which are designed to securely store and manage sensitive data, including passwords, OAuth tokens, and SSH keys.

This report outlines the measures I implemented to enhance the security of secrets in our Kubernetes deployment, moving away from hard-coded secrets to Kubernetes secrets.

Steps to Enhance Secret Security:

Identifying Secret Usage Locations:
Initially, I pinpointed where secrets were utilized in our Kubernetes deployment. The database username and password were stored in a Kubernetes YAML file, and the Django settings.py file contained the Secret_Key.

Creating Kubernetes Secrets:
I then generated Kubernetes secrets for the database username, password, and Secret_key using the command:
kubectl create secret opaque giftcard-app-secrets --from-literal=db_name=<db_username> --from-literal=db_password=<db_password> --from-literal=app_secret=<db_username>

This command created an opaque secret named "giftcard-app-secrets" with "db_name", "db_password", and "app_secret" set to the specified values.

Modifying Kubernetes YAML Files:
The Kubernetes YAML files were altered to utilize the new secrets instead of hard-coded database credentials.

Updating the settings.py File:
The Django settings.py file was updated to employ the new environment variables for database credentials and Secret_Key.

Establishing giftcard-app-secrets via YAML File:
A YAML file was crafted to initiate giftcard-app-secrets.
To ensure this file wasn't tracked in the Git repository, it was excluded using .gitignore. This approach guarantees that the secrets never leave the production environment.
Additionally, to prevent the YAML file from being included in Docker registry pushes, it was omitted from the build context using a .dockerignore file, similar to how .gitignore functions.

Conclusion:
Securing secrets is a crucial aspect of Kubernetes application deployment. Utilizing Kubernetes secrets enables the safekeeping of sensitive information like passwords, keys, and tokens, thereby preventing potential leaks. This report detailed the steps undertaken to enhance the security of secrets in our Kubernetes deployment by transitioning from hard-coded secrets to Kubernetes secrets. 
